// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}
 
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Store {
  id      String      @id @default(uuid())
  name    String
  userId  String
  billboards Billboard[] @relation("storeToBillboard")
  categories Category[] @relation("storeToCategory")
  sizes Size[] @relation("storeToSize")
  colors Color[] @relation("storeToColor")
  products Product[] @relation("storeToProduct")
  orders Order[] @relation("storeToOrder")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model Billboard{
  id String @id @default(uuid())
  storeId  String
  store Store @relation("storeToBillboard",fields: [storeId],references: [id])
  categories Category[]
  label String
  imageUrl String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

model Category{
  id String @id @default(uuid())
  name String
  storeId String
  store Store @relation("storeToCategory",fields: [storeId], references: [id])
  billboardId String
  billboard Billboard @relation(fields: [billboardId],references: [id])
  products Product[] @relation("categoryToProduct")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
  @@index([billboardId])
}

model Size{
  id String @id @default(uuid())
  storeId String
  store Store @relation("storeToSize",fields: [storeId], references: [id])
  products Product[] @relation("sizeToProduct")
  name String
  value String
  createdAt DateTime @default(now()) 
  updatedAt DateTime @updatedAt

  @@index([storeId])
}
model Color{
  id String @id @default(uuid())
  storeId String
  store Store @relation("storeToColor",fields: [storeId], references: [id])
  products Product[] @relation("colorToProduct")
  name String
  value String
  createdAt DateTime @default(now()) 
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

model Product{
  id String @id @default(uuid())
  storeId String
  store Store @relation("storeToProduct",references: [id],fields: [storeId])
  categoryId String
  category Category @relation("categoryToProduct",fields: [categoryId],references: [id])
  name String
  price Decimal
  featured Boolean @default(false)
  archived Boolean @default(false)
  sizeId String
  size Size @relation("sizeToProduct", fields: [sizeId],references: [id])
  colorId String
  color Color @relation("colorToProduct",fields: [colorId],references: [id])
  orderItems OrderItem[]
  images Image[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([colorId])
  @@index([sizeId])
  @@index([categoryId])
  @@index([storeId])
}

model Image{
  id String @id @default(uuid())
  productId String
  product Product @relation(fields: [productId],references: [id],onDelete: Cascade)
  url String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model Order{
  id String @id @default(uuid())
  storeId String
  store Store @relation("storeToOrder",references: [id],fields: [storeId])
  orderItems OrderItem[]
  paid Boolean @default(false)
  phone String @default("")
  address String @default("")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])
}

model OrderItem{
  id String @id @default(uuid())
  orderId String
  order Order @relation(fields: [orderId],references: [id])
  productId String
  product Product @relation(fields: [productId],references: [id])

  @@index([productId])
  @@index([orderId])
}